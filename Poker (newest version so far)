import random



class Card:
    def __init__(self,suit,value):
        self.suit = suit
        self.value = value
    def show(self):
        print('{}{}'.format(self.value,self.suit))


class Deck:
    def __init__(self):
        self.cards=[]
        self.build()

    def build(self):
        for s in ['S','C','D','H']:
            for v in range(2,15):
                self.cards.append(Card(s,v))
    def show(self):
        for c in self.cards:
            c.show()

    def shuffle(self):
        for i in range(len(self.cards)-1,0,-1):
            r=random.randint(0,i)
            self.cards[i],self.cards[r]=self.cards[r],self.cards[i]
    def drawCard(self):
        return self.cards.pop()


class Player:
    def __init__(self):
        self.hand=[]

    def draw(self,deck):
        self.hand.append(deck.drawCard())


    def showHand(self):
        for card in self.hand:
            card.show()


    def poker(self,hands):
        hands = hands.split()
        return max(hands,key=self.hand_rank)



    def card_rank(self):
       
        ranks = ['--23456789TJQKA'.index(r) for r, s in self.hand]
        ranks.sort(reverse=True)
        return [5,4,3,2,1] if self.ranks==[14,5,4,3,2] else self.ranks

    def straight(ranks):
        return max(ranks)-min(ranks)==4 and len(set(ranks))==5

    def flush(hands):
        suits=[s for r,s in hands]
        return len(set(suits))==1

    def kind(n,ranks):
        for r in ranks:
            if ranks.count(r) == n:return r
        return None

    def two_pair(self,ranks):
        pair=self.kind(2,ranks)
        lowpair=self.kind(2,list(reversed(ranks)))
        if pair and lowpair !=pair:
            return (pair, lowpair)
        else:
            return None











    def hand_rank(self):
        ranks = self.card_rank(self)

        if self.straight(ranks) and self.flush(self.hand):
            return (8, max(ranks))

        elif self.kind(4, ranks):
            return (7, self.kind(4, ranks), self.kind(1, ranks))

        elif self.kind(3, ranks) and self.kind(2, ranks):
            return (6, self.kind(3, ranks), self.kind(2, ranks))

        elif self.flush(self.hand):
            return (5, ranks)

        elif self.straight(ranks):
            return (4, max(ranks))

        elif self.kind(3, ranks):
            return (3, self.kind(3, ranks), ranks)

        elif self.two_pair(ranks):
            return (2, self.two_pair(ranks), ranks)

        elif self.kind(2, ranks):
            return (1, self.kind(2, ranks), ranks)

        else:
            return (0, ranks)




d=Deck()
d.shuffle()

Hero=Player()
Villain=Player()

Hero.draw(d)
Hero.draw(d)
Hero.draw(d)
Hero.draw(d)
Hero.draw(d)

Villain.draw(d)
Villain.draw(d)
Villain.draw(d)
Villain.draw(d)
Villain.draw(d)



print('Heroes Hand:')
Hero.showHand()
print('Villains Hand:')
Villain.showHand()


Hero.card_rank()
